# -*- coding: utf-8 -*-
"""
Enhanced Quiz Mini App - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è Telegram
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ø—Ä–æ—Ñ–∏–ª–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Ä–µ–π—Ç–∏–Ω–≥, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
"""

from flask import Flask, render_template, jsonify, request, send_from_directory, g
import json
import sqlite3
import os
import random
import logging
import hashlib
import hmac
import urllib.parse
from datetime import datetime, date, timedelta
from functools import wraps
from contextlib import closing
import traceback

# =====================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =====================================

app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False
app.config['JSON_SORT_KEYS'] = False
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG = os.environ.get('FLASK_ENV') == 'development'
BOT_TOKEN = os.environ.get('BOT_TOKEN', '')
DATABASE_PATH = 'quiz_scores.db'
QUESTIONS_FILE = 'questions.json'

# =====================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# =====================================

logging.basicConfig(
    level=logging.INFO if not DEBUG else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

# =====================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –ò –£–¢–ò–õ–ò–¢–´
# =====================================

def handle_db_error(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except sqlite3.Error as e:
            logger.error(f"Database error in {f.__name__}: {e}")
            return jsonify({'error': 'Database error', 'message': str(e)}), 500
        except Exception as e:
            logger.error(f"Error in {f.__name__}: {e}")
            logger.error(traceback.format_exc())
            return jsonify({'error': 'Internal error', 'message': str(e)}), 500
    return decorated_function

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    if 'db' not in g:
        g.db = sqlite3.connect(DATABASE_PATH)
        g.db.row_factory = sqlite3.Row
    return g.db

def close_db(error):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db = g.pop('db', None)
    if db is not None:
        db.close()

app.teardown_appcontext(close_db)

def validate_telegram_data(init_data, bot_token):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App"""
    try:
        if not init_data or not bot_token:
            return False
            
        parsed_data = urllib.parse.parse_qs(init_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à
        received_hash = parsed_data.get('hash', [None])[0]
        if not received_hash:
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([
            f"{key}={value[0]}" 
            for key, value in sorted(parsed_data.items()) 
            if key != 'hash'
        ])
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            b'WebAppData', 
            bot_token.encode(), 
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        calculated_hash = hmac.new(
            secret_key, 
            data_check_string.encode(), 
            hashlib.sha256
        ).hexdigest()
        
        return calculated_hash == received_hash
        
    except Exception as e:
        logger.warning(f"Telegram data validation error: {e}")
        return False

# =====================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =====================================

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS game_results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    score INTEGER NOT NULL,
                    total INTEGER NOT NULL,
                    category TEXT NOT NULL,
                    difficulty TEXT NOT NULL,
                    percentage REAL NOT NULL,
                    time_spent INTEGER DEFAULT 0,
                    hints_used INTEGER DEFAULT 0,
                    game_mode TEXT DEFAULT 'normal',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_game_results_user_id 
                ON game_results(user_id)
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_profiles (
                    user_id TEXT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT NOT NULL,
                    last_name TEXT,
                    total_games INTEGER DEFAULT 0,
                    total_score INTEGER DEFAULT 0,
                    best_streak INTEGER DEFAULT 0,
                    current_streak INTEGER DEFAULT 0,
                    achievements TEXT DEFAULT '[]',
                    favorite_category TEXT,
                    level INTEGER DEFAULT 1,
                    experience_points INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS daily_challenges (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    challenge_date DATE NOT NULL,
                    challenge_type TEXT NOT NULL,
                    target_value INTEGER NOT NULL,
                    current_progress INTEGER DEFAULT 0,
                    completed BOOLEAN DEFAULT FALSE,
                    reward_claimed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, challenge_date, challenge_type)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS achievements (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    description TEXT NOT NULL,
                    icon TEXT NOT NULL,
                    condition_type TEXT NOT NULL,
                    condition_value INTEGER NOT NULL,
                    reward_points INTEGER DEFAULT 0,
                    rarity TEXT DEFAULT 'common'
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS app_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    total_users INTEGER DEFAULT 0,
                    total_games INTEGER DEFAULT 0,
                    total_questions_answered INTEGER DEFAULT 0,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def init_achievements():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    achievements = [
        {
            'id': 'first_game',
            'name': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
            'icon': 'üéØ',
            'condition_type': 'games_played',
            'condition_value': 1,
            'reward_points': 10,
            'rarity': 'common'
        },
        {
            'id': 'perfectionist',
            'name': '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            'description': '–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–≥—Ä–µ',
            'icon': 'üíØ',
            'condition_type': 'perfect_score',
            'condition_value': 1,
            'reward_points': 50,
            'rarity': 'rare'
        },
        {
            'id': 'scholar',
            'name': '–≠—Ä—É–¥–∏—Ç',
            'description': '–ù–∞–±–µ—Ä–∏—Ç–µ 80%+ –≤ —Ç—Ä–µ—Ö —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö',
            'icon': 'üéì',
            'condition_type': 'category_master',
            'condition_value': 3,
            'reward_points': 100,
            'rarity': 'epic'
        },
        {
            'id': 'marathoner',
            'name': '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–∂–∏–º –º–∞—Ä–∞—Ñ–æ–Ω',
            'icon': 'üèÉ‚Äç‚ôÇÔ∏è',
            'condition_type': 'marathon_completed',
            'condition_value': 1,
            'reward_points': 75,
            'rarity': 'rare'
        },
        {
            'id': 'streak_master',
            'name': '–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–π',
            'description': '–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥',
            'icon': 'üî•',
            'condition_type': 'answer_streak',
            'condition_value': 10,
            'reward_points': 80,
            'rarity': 'rare'
        },
        {
            'id': 'speed_demon',
            'name': '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã',
            'icon': '‚ö°',
            'condition_type': 'speed_completion',
            'condition_value': 120,
            'reward_points': 60,
            'rarity': 'uncommon'
        },
        {
            'id': 'dedicated_player',
            'name': '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫',
            'description': '–ò–≥—Ä–∞–π—Ç–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
            'icon': 'üìÖ',
            'condition_type': 'daily_streak',
            'condition_value': 7,
            'reward_points': 150,
            'rarity': 'epic'
        },
        {
            'id': 'knowledge_seeker',
            'name': '–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π',
            'description': '–°—ã–≥—Ä–∞–π—Ç–µ 100 –∏–≥—Ä',
            'icon': 'üìö',
            'condition_type': 'games_played',
            'condition_value': 100,
            'reward_points': 200,
            'rarity': 'legendary'
        }
    ]
    
    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            
            for ach in achievements:
                cursor.execute('''
                    INSERT OR REPLACE INTO achievements 
                    (id, name, description, icon, condition_type, condition_value, reward_points, rarity)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    ach['id'], ach['name'], ach['description'], ach['icon'],
                    ach['condition_type'], ach['condition_value'], 
                    ach['reward_points'], ach['rarity']
                ))
            
            conn.commit()
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")

def create_questions_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    questions = {
        "history": {
            "easy": [
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?",
                    "options": ["1939", "1940", "1941", "1938"],
                    "correct": 0,
                    "explanation": "–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å 1 —Å–µ–Ω—Ç—è–±—Ä—è 1939 –≥–æ–¥–∞ —Å –Ω–∞–ø–∞–¥–µ–Ω–∏—è –ì–µ—Ä–º–∞–Ω–∏–∏ –Ω–∞ –ü–æ–ª—å—à—É."
                },
                {
                    "question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê?",
                    "options": ["–¢–æ–º–∞—Å –î–∂–µ—Ñ—Ñ–µ—Ä—Å–æ–Ω", "–î–∂–æ—Ä–¥–∂ –í–∞—à–∏–Ω–≥—Ç–æ–Ω", "–î–∂–æ–Ω –ê–¥–∞–º—Å", "–ë–µ–Ω–¥–∂–∞–º–∏–Ω –§—Ä–∞–Ω–∫–ª–∏–Ω"],
                    "correct": 1,
                    "explanation": "–î–∂–æ—Ä–¥–∂ –í–∞—à–∏–Ω–≥—Ç–æ–Ω –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê (1789-1797)."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø–∞–ª–∞ –ë–µ—Ä–ª–∏–Ω—Å–∫–∞—è —Å—Ç–µ–Ω–∞?",
                    "options": ["1987", "1988", "1989", "1990"],
                    "correct": 2,
                    "explanation": "–ë–µ—Ä–ª–∏–Ω—Å–∫–∞—è —Å—Ç–µ–Ω–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∞ 9 –Ω–æ—è–±—Ä—è 1989 –≥–æ–¥–∞."
                },
                {
                    "question": "–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –ê–º–µ—Ä–∏–∫—É –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Ü–µ–≤?",
                    "options": ["–í–∞—Å–∫–æ –¥–∞ –ì–∞–º–∞", "–•—Ä–∏—Å—Ç–æ—Ñ–æ—Ä –ö–æ–ª—É–º–±", "–§–µ—Ä–Ω–∞–Ω –ú–∞–≥–µ–ª–ª–∞–Ω", "–ê–º–µ—Ä–∏–≥–æ –í–µ—Å–ø—É—á—á–∏"],
                    "correct": 1,
                    "explanation": "–•—Ä–∏—Å—Ç–æ—Ñ–æ—Ä –ö–æ–ª—É–º–± –æ—Ç–∫—Ä—ã–ª –ê–º–µ—Ä–∏–∫—É –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Ü–µ–≤ –≤ 1492 –≥–æ–¥—É."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø–æ –ª–µ–≥–µ–Ω–¥–µ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –†–∏–º?",
                    "options": ["753 –¥–æ –Ω.—ç.", "776 –¥–æ –Ω.—ç.", "500 –¥–æ –Ω.—ç.", "800 –¥–æ –Ω.—ç."],
                    "correct": 0,
                    "explanation": "–ü–æ –ª–µ–≥–µ–Ω–¥–µ, –†–∏–º –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –†–æ–º—É–ª–æ–º –≤ 753 –≥–æ–¥—É –¥–æ –Ω.—ç."
                },
                {
                    "question": "–ö–∞–∫–∞—è –¥–∏–Ω–∞—Å—Ç–∏—è –ø—Ä–∞–≤–∏–ª–∞ –≤ –†–æ—Å—Å–∏–∏ –¥–æ –†–æ–º–∞–Ω–æ–≤—ã—Ö?",
                    "options": ["–ì–æ–¥—É–Ω–æ–≤—ã", "–†—é—Ä–∏–∫–æ–≤–∏—á–∏", "–®—É–π—Å–∫–∏–µ", "–ì–æ–ª–∏—Ü—ã–Ω—ã"],
                    "correct": 1,
                    "explanation": "–î–∏–Ω–∞—Å—Ç–∏—è –†—é—Ä–∏–∫–æ–≤–∏—á–µ–π –ø—Ä–∞–≤–∏–ª–∞ –≤ –†–æ—Å—Å–∏–∏ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ –∫ –≤–ª–∞—Å—Ç–∏ –†–æ–º–∞–Ω–æ–≤—ã—Ö."
                }
            ],
            "medium": [
                {
                    "question": "–ö–∞–∫–∞—è –±–∏—Ç–≤–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ?",
                    "options": ["–ë–∏—Ç–≤–∞ –∑–∞ –ú–æ—Å–∫–≤—É", "–°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –±–∏—Ç–≤–∞", "–ö—É—Ä—Å–∫–∞—è –±–∏—Ç–≤–∞", "–ë–∏—Ç–≤–∞ –∑–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥"],
                    "correct": 1,
                    "explanation": "–°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –±–∏—Ç–≤–∞ (1942-1943) —Å—Ç–∞–ª–∞ –ø–µ—Ä–µ–ª–æ–º–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ –≤–æ–π–Ω–µ."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏?",
                    "options": ["1916", "1917", "1918", "1919"],
                    "correct": 1,
                    "explanation": "–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –æ–∫—Ç—è–±—Ä–µ 1917 –≥–æ–¥–∞ –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å—Ç–∏–ª—é."
                },
                {
                    "question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏?",
                    "options": ["–Æ–ª–∏–π –¶–µ–∑–∞—Ä—å", "–û–∫—Ç–∞–≤–∏–∞–Ω –ê–≤–≥—É—Å—Ç", "–ú–∞—Ä–∫ –ê–Ω—Ç–æ–Ω–∏–π", "–ü–æ–º–ø–µ–π"],
                    "correct": 1,
                    "explanation": "–û–∫—Ç–∞–≤–∏–∞–Ω –ê–≤–≥—É—Å—Ç —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º —Ä–∏–º—Å–∫–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ 27 –≥–æ–¥—É –¥–æ –Ω.—ç."
                }
            ],
            "hard": [
                {
                    "question": "–ö—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ó–∞–ø–∞–¥–Ω–æ–π –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏?",
                    "options": ["–†–æ–º—É–ª –ê–≤–≥—É—Å—Ç—É–ª", "–Æ–ª–∏–π –ù–µ–ø–æ—Ç", "–û–¥–æ–∞–∫—Ä", "–¢–µ–æ–¥–æ—Ä–∏—Ö"],
                    "correct": 0,
                    "explanation": "–†–æ–º—É–ª –ê–≤–≥—É—Å—Ç—É–ª –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ó–∞–ø–∞–¥–Ω–æ–π –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏ (476 –≥.)."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É —Å–æ—Å—Ç–æ—è–ª–∞—Å—å –±–∏—Ç–≤–∞ –ø—Ä–∏ –ö–∞–Ω–Ω–∞—Ö?",
                    "options": ["218 –¥–æ –Ω.—ç.", "216 –¥–æ –Ω.—ç.", "214 –¥–æ –Ω.—ç.", "212 –¥–æ –Ω.—ç."],
                    "correct": 1,
                    "explanation": "–ë–∏—Ç–≤–∞ –ø—Ä–∏ –ö–∞–Ω–Ω–∞—Ö –º–µ–∂–¥—É –†–∏–º–æ–º –∏ –ö–∞—Ä—Ñ–∞–≥–µ–Ω–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ 2 –∞–≤–≥—É—Å—Ç–∞ 216 –≥–æ–¥–∞ –¥–æ –Ω.—ç."
                }
            ]
        },
        "science": {
            "easy": [
                {
                    "question": "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª 'O'?",
                    "options": ["–û–ª–æ–≤–æ", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ", "–û—Å–º–∏–π"],
                    "correct": 1,
                    "explanation": "–ö–∏—Å–ª–æ—Ä–æ–¥ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º O –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ."
                },
                {
                    "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
                    "options": ["7", "8", "9", "10"],
                    "correct": 1,
                    "explanation": "–í –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ 8 –ø–ª–∞–Ω–µ—Ç –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ü–ª—É—Ç–æ–Ω–∞ –∏–∑ –∏—Ö —á–∏—Å–ª–∞ –≤ 2006 –≥–æ–¥—É."
                },
                {
                    "question": "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –±–æ—Ç–∞–Ω–∏–∫–∞?",
                    "options": ["–ñ–∏–≤–æ—Ç–Ω—ã—Ö", "–†–∞—Å—Ç–µ–Ω–∏—è", "–ú–∏–Ω–µ—Ä–∞–ª—ã", "–ó–≤–µ–∑–¥—ã"],
                    "correct": 1,
                    "explanation": "–ë–æ—Ç–∞–Ω–∏–∫–∞ - –Ω–∞—É–∫–∞ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö."
                },
                {
                    "question": "–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?",
                    "options": ["44", "46", "48", "50"],
                    "correct": 1,
                    "explanation": "–£ —á–µ–ª–æ–≤–µ–∫–∞ 46 —Ö—Ä–æ–º–æ—Å–æ–º (23 –ø–∞—Ä—ã)."
                },
                {
                    "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ –°–æ–ª–Ω—Ü—É?",
                    "options": ["–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å"],
                    "correct": 2,
                    "explanation": "–ú–µ—Ä–∫—É—Ä–∏–π - –±–ª–∏–∂–∞–π—à–∞—è –∫ –°–æ–ª–Ω—Ü—É –ø–ª–∞–Ω–µ—Ç–∞."
                }
            ],
            "medium": [
                {
                    "question": "–ö–∞–∫–æ–π –≥–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ó–µ–º–ª–∏?",
                    "options": ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–ê–∑–æ—Ç", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–ê—Ä–≥–æ–Ω"],
                    "correct": 1,
                    "explanation": "–ê–∑–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–∫–æ–ª–æ 78% –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ó–µ–º–ª–∏."
                },
                {
                    "question": "–ö—Ç–æ —Å–æ–∑–¥–∞–ª —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                    "options": ["–ù—å—é—Ç–æ–Ω", "–≠–π–Ω—à—Ç–µ–π–Ω", "–ì–∞–ª–∏–ª–µ–π", "–ö–µ–ø–ª–µ—Ä"],
                    "correct": 1,
                    "explanation": "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω —Å–æ–∑–¥–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏ –æ–±—â—É—é —Ç–µ–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
                },
                {
                    "question": "–ö–∞–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)?",
                    "options": ["300,000 –∫–º/—Å", "150,000 –∫–º/—Å", "450,000 –∫–º/—Å", "500,000 –∫–º/—Å"],
                    "correct": 0,
                    "explanation": "–°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 300,000 –∫–º/—Å."
                }
            ],
            "hard": [
                {
                    "question": "–ö–∞–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å—á–∏–∫–æ–º —Å–ª–∞–±–æ–≥–æ —è–¥–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è?",
                    "options": ["–§–æ—Ç–æ–Ω", "–ì–ª—é–æ–Ω", "W –∏ Z –±–æ–∑–æ–Ω—ã", "–ì—Ä–∞–≤–∏—Ç–æ–Ω"],
                    "correct": 2,
                    "explanation": "W –∏ Z –±–æ–∑–æ–Ω—ã —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å—á–∏–∫–∞–º–∏ —Å–ª–∞–±–æ–≥–æ —è–¥–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
                },
                {
                    "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–Ω—Ç—Ä–æ–ø–∏—è –≤ —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–µ?",
                    "options": ["–ú–µ—Ä–∞ —ç–Ω–µ—Ä–≥–∏–∏", "–ú–µ—Ä–∞ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞", "–ú–µ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–ú–µ—Ä–∞ –¥–∞–≤–ª–µ–Ω–∏—è"],
                    "correct": 1,
                    "explanation": "–≠–Ω—Ç—Ä–æ–ø–∏—è - —ç—Ç–æ –º–µ—Ä–∞ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞ –∏–ª–∏ —Ö–∞–æ—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."
                }
            ]
        },
        "geography": {
            "easy": [
                {
                    "question": "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?",
                    "options": ["–û—Å–∞–∫–∞", "–ö–∏–æ—Ç–æ", "–¢–æ–∫–∏–æ", "–ù–∞–≥–æ—è"],
                    "correct": 2,
                    "explanation": "–¢–æ–∫–∏–æ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –Ø–ø–æ–Ω–∏–∏ —Å 1868 –≥–æ–¥–∞."
                },
                {
                    "question": "–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω –Ω–∞ –ó–µ–º–ª–µ?",
                    "options": ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π", "–¢–∏—Ö–∏–π"],
                    "correct": 3,
                    "explanation": "–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–π —Ç—Ä–µ—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏."
                },
                {
                    "question": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?",
                    "options": ["5", "6", "7", "8"],
                    "correct": 2,
                    "explanation": "–ù–∞ –ó–µ–º–ª–µ 7 –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤: –ê–∑–∏—è, –ê—Ñ—Ä–∏–∫–∞, –ï–≤—Ä–æ–ø–∞, –°–µ–≤–µ—Ä–Ω–∞—è –∏ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞, –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞."
                },
                {
                    "question": "–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ?",
                    "options": ["–ö2", "–≠–≤–µ—Ä–µ—Å—Ç", "–ö–∞–Ω—á–µ–Ω–¥–∂–∞–Ω–≥–∞", "–õ—Ö–æ—Ü–∑–µ"],
                    "correct": 1,
                    "explanation": "–≠–≤–µ—Ä–µ—Å—Ç (–î–∂–æ–º–æ–ª—É–Ω–≥–º–∞) - —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ (8849 –º)."
                }
            ],
            "medium": [
                {
                    "question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –º–∏—Ä–µ?",
                    "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–ú–∏—Å—Å–∏—Å–∏–ø–∏", "–Ø–Ω—Ü–∑—ã"],
                    "correct": 1,
                    "explanation": "–ù–∏–ª - —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ (6650 –∫–º)."
                },
                {
                    "question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ú–∞—á—É-–ü–∏–∫—á—É?",
                    "options": ["–ë—Ä–∞–∑–∏–ª–∏—è", "–ü–µ—Ä—É", "–ß–∏–ª–∏", "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞"],
                    "correct": 1,
                    "explanation": "–ú–∞—á—É-–ü–∏–∫—á—É - –¥—Ä–µ–≤–Ω–∏–π –≥–æ—Ä–æ–¥ –∏–Ω–∫–æ–≤, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –ü–µ—Ä—É."
                },
                {
                    "question": "–°—Ç–æ–ª–∏—Ü–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?",
                    "options": ["–°–∏–¥–Ω–µ–π", "–ú–µ–ª—å–±—É—Ä–Ω", "–ö–∞–Ω–±–µ—Ä—Ä–∞", "–ë—Ä–∏—Å–±–µ–Ω"],
                    "correct": 2,
                    "explanation": "–ö–∞–Ω–±–µ—Ä—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ —Å 1913 –≥–æ–¥–∞."
                }
            ],
            "hard": [
                {
                    "question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—É—Å—Ç—ã–Ω—è –ê—Ç–∞–∫–∞–º–∞?",
                    "options": ["–ü–µ—Ä—É", "–ß–∏–ª–∏", "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "–ë–æ–ª–∏–≤–∏—è"],
                    "correct": 1,
                    "explanation": "–ü—É—Å—Ç—ã–Ω—è –ê—Ç–∞–∫–∞–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ —Å–µ–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ß–∏–ª–∏."
                },
                {
                    "question": "–ö–∞–∫–æ–π –ø—Ä–æ–ª–∏–≤ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ï–≤—Ä–æ–ø—É –∏ –ê–∑–∏—é –≤ —Ä–∞–π–æ–Ω–µ –°—Ç–∞–º–±—É–ª–∞?",
                    "options": ["–î–∞—Ä–¥–∞–Ω–µ–ª–ª—ã", "–ë–æ—Å—Ñ–æ—Ä", "–ì–∏–±—Ä–∞–ª—Ç–∞—Ä—Å–∫–∏–π", "–õ–∞-–ú–∞–Ω—à"],
                    "correct": 1,
                    "explanation": "–ü—Ä–æ–ª–∏–≤ –ë–æ—Å—Ñ–æ—Ä —Ä–∞–∑–¥–µ–ª—è–µ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫—É—é –∏ –∞–∑–∏–∞—Ç—Å–∫—É—é —á–∞—Å—Ç–∏ –¢—É—Ä—Ü–∏–∏."
                }
            ]
        },
        "sports": {
            "easy": [
                {
                    "question": "–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞ –ø–æ–ª–µ?",
                    "options": ["10", "11", "12", "9"],
                    "correct": 1,
                    "explanation": "–í —Ñ—É—Ç–±–æ–ª–µ –Ω–∞ –ø–æ–ª–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–≥—Ä–∞—é—Ç 11 –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≤–∏–¥–µ —Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–π–±–∞?",
                    "options": ["–§—É—Ç–±–æ–ª", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–•–æ–∫–∫–µ–π", "–¢–µ–Ω–Ω–∏—Å"],
                    "correct": 2,
                    "explanation": "–í —Ö–æ–∫–∫–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–π–±–∞ –≤–º–µ—Å—Ç–æ –º—è—á–∞."
                },
                {
                    "question": "–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –¥–∞–µ—Ç—Å—è –∑–∞ —Ç—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π –±—Ä–æ—Å–æ–∫ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ?",
                    "options": ["2", "3", "4", "5"],
                    "correct": 1,
                    "explanation": "–ó–∞ —Ç—Ä–µ—Ö–æ—á–∫–æ–≤—ã–π –±—Ä–æ—Å–æ–∫ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ –¥–∞–µ—Ç—Å—è 3 –æ—á–∫–∞."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≤–∏–¥–µ —Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∫–µ—Ç–∫–∞ –∏ –≤–æ–ª–∞–Ω?",
                    "options": ["–¢–µ–Ω–Ω–∏—Å", "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", "–°–∫–≤–æ—à", "–ü–∏–Ω–≥-–ø–æ–Ω–≥"],
                    "correct": 1,
                    "explanation": "–í –±–∞–¥–º–∏–Ω—Ç–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∫–µ—Ç–∫–∞ –∏ –≤–æ–ª–∞–Ω (—à–∞—Ç—Ç–ª–∫–æ–∫)."
                }
            ],
            "medium": [
                {
                    "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ª–µ—Ç–Ω–∏–µ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã?",
                    "options": ["–ö–∞–∂–¥—ã–µ 2 –≥–æ–¥–∞", "–ö–∞–∂–¥—ã–µ 3 –≥–æ–¥–∞", "–ö–∞–∂–¥—ã–µ 4 –≥–æ–¥–∞", "–ö–∞–∂–¥—ã–µ 5 –ª–µ—Ç"],
                    "correct": 2,
                    "explanation": "–õ–µ—Ç–Ω–∏–µ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∫–∞–∂–¥—ã–µ 4 –≥–æ–¥–∞."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É —Å–æ—Å—Ç–æ—è–ª–∏—Å—å –ø–µ—Ä–≤—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã?",
                    "options": ["1892", "1896", "1900", "1904"],
                    "correct": 1,
                    "explanation": "–ü–µ—Ä–≤—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã —Å–æ—Å—Ç–æ—è–ª–∏—Å—å –≤ –ê—Ñ–∏–Ω–∞—Ö –≤ 1896 –≥–æ–¥—É."
                }
            ],
            "hard": [
                {
                    "question": "–ö—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ –±–µ–≥–µ –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤ —Å—Ä–µ–¥–∏ –º—É–∂—á–∏–Ω?",
                    "options": ["–£—Å—ç–π–Ω –ë–æ–ª—Ç", "–ö–∞—Ä–ª –õ—å—é–∏—Å", "–ú–æ—Ä–∏—Å –ì—Ä–∏–Ω", "–¢–∞–π—Å–æ–Ω –ì—ç–π"],
                    "correct": 0,
                    "explanation": "–£—Å—ç–π–Ω –ë–æ–ª—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –≤ –±–µ–≥–µ –Ω–∞ 100–º - 9.58 —Å–µ–∫—É–Ω–¥—ã (2009)."
                }
            ]
        },
        "technology": {
            "easy": [
                {
                    "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 'WWW'?",
                    "options": ["World Wide Web", "World War Web", "Wide World Web", "World Web Wide"],
                    "correct": 0,
                    "explanation": "WWW —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ World Wide Web - –≤—Å–µ–º–∏—Ä–Ω–∞—è –ø–∞—É—Ç–∏–Ω–∞."
                },
                {
                    "question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –∫–æ–º–ø–∞–Ω–∏—é Apple?",
                    "options": ["–ë–∏–ª–ª –ì–µ–π—Ç—Å", "–°—Ç–∏–≤ –î–∂–æ–±—Å", "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥", "–ò–ª–æ–Ω –ú–∞—Å–∫"],
                    "correct": 1,
                    "explanation": "–°—Ç–∏–≤ –î–∂–æ–±—Å –æ—Å–Ω–æ–≤–∞–ª Apple –≤ 1976 –≥–æ–¥—É –≤–º–µ—Å—Ç–µ —Å–æ –°—Ç–∏–≤–æ–º –í–æ–∑–Ω—è–∫–æ–º."
                },
                {
                    "question": "–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Windows?",
                    "options": ["Apple", "Google", "Microsoft", "IBM"],
                    "correct": 2,
                    "explanation": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Windows —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–ø–∞–Ω–∏—è Microsoft."
                }
            ],
            "medium": [
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π iPhone?",
                    "options": ["2005", "2006", "2007", "2008"],
                    "correct": 2,
                    "explanation": "–ü–µ—Ä–≤—ã–π iPhone –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω Apple –≤ 2007 –≥–æ–¥—É."
                },
                {
                    "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ 'HTTP'?",
                    "options": ["HyperText Transfer Protocol", "High Tech Transfer Protocol", "HyperText Transport Protocol", "High Text Transfer Protocol"],
                    "correct": 0,
                    "explanation": "HTTP —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ HyperText Transfer Protocol."
                }
            ],
            "hard": [
                {
                    "question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º?",
                    "options": ["Java", "Python", "C++", "JavaScript"],
                    "correct": 1,
                    "explanation": "Python –±—ã–ª —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º –≤ –Ω–∞—á–∞–ª–µ 1990-—Ö –≥–æ–¥–æ–≤."
                },
                {
                    "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª –∏–∑–æ–±—Ä–µ—Ç–µ–Ω —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä?",
                    "options": ["1947", "1948", "1949", "1950"],
                    "correct": 0,
                    "explanation": "–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä –±—ã–ª –∏–∑–æ–±—Ä–µ—Ç–µ–Ω –≤ Bell Labs –≤ 1947 –≥–æ–¥—É."
                }
            ]
        },
        "arts": {
            "easy": [
                {
                    "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∫–∞—Ä—Ç–∏–Ω—É '–ú–æ–Ω–∞ –õ–∏–∑–∞'?",
                    "options": ["–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", "–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏", "–†–∞—Ñ–∞—ç–ª—å", "–î–æ–Ω–∞—Ç–µ–ª–ª–æ"],
                    "correct": 1,
                    "explanation": "–ú–æ–Ω—É –õ–∏–∑—É –Ω–∞–ø–∏—Å–∞–ª –õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏ –º–µ–∂–¥—É 1503-1519 –≥–æ–¥–∞–º–∏."
                },
                {
                    "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä'?",
                    "options": ["–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥", "–î–∂–æ—Ä–¥–∂ –ú–∞—Ä—Ç–∏–Ω"],
                    "correct": 1,
                    "explanation": "–°–µ—Ä–∏—é –∫–Ω–∏–≥ –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ –Ω–∞–ø–∏—Å–∞–ª–∞ –î–∂. –ö. –†–æ—É–ª–∏–Ω–≥."
                },
                {
                    "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?",
                    "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–¢—É—Ä–≥–µ–Ω–µ–≤"],
                    "correct": 1,
                    "explanation": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω '–í–æ–π–Ω–∞ –∏ –º–∏—Ä' (1865-1869)."
                }
            ],
            "medium": [
                {
                    "question": "–í –∫–∞–∫–æ–º –º—É–∑–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∞ '–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å' –í–∞–Ω –ì–æ–≥–∞?",
                    "options": ["–õ—É–≤—Ä", "–≠—Ä–º–∏—Ç–∞–∂", "–ú—É–∑–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ (MoMA)", "–ü—Ä–∞–¥–æ"],
                    "correct": 2,
                    "explanation": "'–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú—É–∑–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ."
                },
                {
                    "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Å–∏–º—Ñ–æ–Ω–∏—é '–ö –≠–ª–∏–∑–µ'?",
                    "options": ["–ú–æ—Ü–∞—Ä—Ç", "–ë–µ—Ç—Ö–æ–≤–µ–Ω", "–ë–∞—Ö", "–®–æ–ø–µ–Ω"],
                    "correct": 1,
                    "explanation": "'–ö –≠–ª–∏–∑–µ' - –∑–Ω–∞–º–µ–Ω–∏—Ç–∞—è –ø—å–µ—Å–∞ –õ—é–¥–≤–∏–≥–∞ –≤–∞–Ω –ë–µ—Ç—Ö–æ–≤–µ–Ω–∞."
                }
            ],
            "hard": [
                {
                    "question": "–ö—Ç–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –æ–ø–µ—Ä—ã '–ö–∞—Ä–º–µ–Ω'?",
                    "options": ["–ú–æ—Ü–∞—Ä—Ç", "–ë–∏–∑–µ", "–í–µ—Ä–¥–∏", "–ü—É—á—á–∏–Ω–∏"],
                    "correct": 1,
                    "explanation": "–û–ø–µ—Ä—É '–ö–∞—Ä–º–µ–Ω' –Ω–∞–ø–∏—Å–∞–ª —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –ñ–æ—Ä–∂ –ë–∏–∑–µ."
                }
            ]
        }
    }
    
    try:
        with open(QUESTIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(questions, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤: {QUESTIONS_FILE}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        raise

def load_questions():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(QUESTIONS_FILE):
            logger.info("üìÑ –§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
            create_questions_file()
        
        with open(QUESTIONS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        total_questions = sum(
            len(difficulties.get(diff, [])) 
            for category, difficulties in data.items()
            for diff in ['easy', 'medium', 'hard']
        )
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤")
        return data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}

# =====================================
# –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
# =====================================

def create_or_update_user_profile(user_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = get_db()
        cursor = db.cursor()
        
        user_id = user_data.get('user_id')
        if not user_id:
            raise ValueError("User ID is required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        existing = cursor.execute(
            'SELECT user_id FROM user_profiles WHERE user_id = ?', 
            (user_id,)
        ).fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            cursor.execute('''
                UPDATE user_profiles 
                SET username = ?, first_name = ?, last_name = ?, updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            ''', (
                user_data.get('username', ''),
                user_data.get('first_name', '–ò–≥—Ä–æ–∫'),
                user_data.get('last_name', ''),
                user_id
            ))
            logger.debug(f"Updated profile for user {user_id}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            cursor.execute('''
                INSERT INTO user_profiles 
                (user_id, username, first_name, last_name, total_games, total_score, 
                 best_streak, current_streak, achievements, level, experience_points)
                VALUES (?, ?, ?, ?, 0, 0, 0, 0, '[]', 1, 0)
            ''', (
                user_id,
                user_data.get('username', ''),
                user_data.get('first_name', '–ò–≥—Ä–æ–∫'),
                user_data.get('last_name', '')
            ))
            logger.info(f"Created new profile for user {user_id}")
        
        db.commit()
        return True
        
    except Exception as e:
        logger.error(f"Error creating/updating user profile: {e}")
        return False

def check_achievements(user_id, game_result):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        db = get_db()
        cursor = db.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = cursor.execute(
            'SELECT achievements, total_games FROM user_profiles WHERE user_id = ?',
            (user_id,)
        ).fetchone()
        
        if not profile:
            return []
        
        current_achievements = json.loads(profile['achievements'] or '[]')
        new_achievements = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        all_achievements = cursor.execute('SELECT * FROM achievements').fetchall()
        
        for achievement in all_achievements:
            if achievement['id'] in current_achievements:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            earned = False
            
            if achievement['condition_type'] == 'games_played':
                total_games = profile['total_games'] + 1  # +1 –∑–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
                earned = total_games >= achievement['condition_value']
                
            elif achievement['condition_type'] == 'perfect_score':
                earned = game_result.get('percentage', 0) == 100
                
            elif achievement['condition_type'] == 'marathon_completed':
                earned = game_result.get('game_mode') == 'marathon'
                
            elif achievement['condition_type'] == 'speed_completion':
                earned = game_result.get('time_spent', 999) <= achievement['condition_value']
                
            elif achievement['condition_type'] == 'category_master':
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å 80%+ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                categories_80_plus = cursor.execute('''
                    SELECT COUNT(DISTINCT category) FROM game_results 
                    WHERE user_id = ? AND percentage >= 80
                ''', (user_id,)).fetchone()[0]
                earned = categories_80_plus >= achievement['condition_value']
            
            if earned:
                current_achievements.append(achievement['id'])
                new_achievements.append({
                    'id': achievement['id'],
                    'name': achievement['name'],
                    'description': achievement['description'],
                    'icon': achievement['icon'],
                    'points': achievement['reward_points'],
                    'rarity': achievement['rarity']
                })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if new_achievements:
            cursor.execute('''
                UPDATE user_profiles 
                SET achievements = ?, experience_points = experience_points + ?
                WHERE user_id = ?
            ''', (
                json.dumps(current_achievements),
                sum(ach['points'] for ach in new_achievements),
                user_id
            ))
            db.commit()
        
        return new_achievements
        
    except Exception as e:
        logger.error(f"Error checking achievements: {e}")
        return []

def update_daily_challenge_progress(user_id, game_result):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    try:
        db = get_db()
        cursor = db.cursor()
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        challenges = cursor.execute('''
            SELECT * FROM daily_challenges 
            WHERE user_id = ? AND challenge_date = ? AND completed = FALSE
        ''', (user_id, today)).fetchall()
        
        for challenge in challenges:
            progress_made = False
            new_progress = challenge['current_progress']
            
            if challenge['challenge_type'] == 'games_count':
                new_progress += 1
                progress_made = True
                
            elif challenge['challenge_type'] == 'category_master' and game_result.get('percentage', 0) >= 80:
                new_progress = challenge['target_value']  # –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ä–∞–∑—É
                progress_made = True
                
            elif challenge['challenge_type'] == 'perfect_answers' and game_result.get('percentage', 0) == 100:
                new_progress = min(new_progress + game_result.get('total', 0), challenge['target_value'])
                progress_made = True
            
            if progress_made:
                completed = new_progress >= challenge['target_value']
                cursor.execute('''
                    UPDATE daily_challenges 
                    SET current_progress = ?, completed = ?
                    WHERE id = ?
                ''', (new_progress, completed, challenge['id']))
        
        db.commit()
        
    except Exception as e:
        logger.error(f"Error updating daily challenges: {e}")

def create_daily_challenge(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = get_db()
        cursor = db.cursor()
        today = date.today()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        existing = cursor.execute('''
            SELECT id FROM daily_challenges 
            WHERE user_id = ? AND challenge_date = ?
        ''', (user_id, today)).fetchone()
        
        if existing:
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        challenges = [
            {
                'type': 'games_count',
                'target': 3,
                'description': '–°—ã–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è'
            },
            {
                'type': 'category_master',
                'target': 80,
                'description': '–ù–∞–±–µ—Ä–∏—Ç–µ 80%+ –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            },
            {
                'type': 'perfect_answers',
                'target': 5,
                'description': '–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤'
            }
        ]
        
        challenge = random.choice(challenges)
        
        cursor.execute('''
            INSERT INTO daily_challenges 
            (user_id, challenge_date, challenge_type, target_value)
            VALUES (?, ?, ?, ?)
        ''', (user_id, today, challenge['type'], challenge['target']))
        
        db.commit()
        logger.debug(f"Created daily challenge for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error creating daily challenge: {e}")

# =====================================
# –ú–ê–†–®–†–£–¢–´ API
# =====================================

@app.before_request
def before_request():
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not request.path.startswith('/static/'):
        logger.debug(f"üåê {request.method} {request.path} - {request.remote_addr}")

@app.after_request
def after_request(response):
    """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    if not request.path.startswith('/static/'):
        logger.debug(f"üì§ {response.status_code} - {response.content_length or 0} bytes")
    
    return response

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/questions/<category>/<difficulty>')
@handle_db_error
def get_questions(category, difficulty):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    questions_data = load_questions()
    
    if category not in questions_data:
        logger.warning(f"Category {category} not found")
        return jsonify({'error': f'Category {category} not found'}), 404
        
    if difficulty not in questions_data[category]:
        logger.warning(f"Difficulty {difficulty} not found in category {category}")
        return jsonify({'error': f'Difficulty {difficulty} not found'}), 404
    
    category_questions = questions_data[category][difficulty].copy()
    random.shuffle(category_questions)
    
    logger.info(f"üìö Sent {len(category_questions)} questions for {category}/{difficulty}")
    return jsonify(category_questions)

@app.route('/api/profile/<user_id>')
@handle_db_error
def get_profile(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = get_db()
    cursor = db.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = cursor.execute(
        'SELECT * FROM user_profiles WHERE user_id = ?', 
        (user_id,)
    ).fetchone()
    
    if not profile:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        create_or_update_user_profile({
            'user_id': user_id,
            'first_name': '–ò–≥—Ä–æ–∫',
            'username': '',
            'last_name': ''
        })
        profile = cursor.execute(
            'SELECT * FROM user_profiles WHERE user_id = ?', 
            (user_id,)
        ).fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = cursor.execute('''
        SELECT category, COUNT(*) as games, 
               AVG(percentage) as avg_score, MAX(percentage) as best_score
        FROM game_results 
        WHERE user_id = ? 
        GROUP BY category
    ''', (user_id,)).fetchall()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã
    recent_games = cursor.execute('''
        SELECT category, difficulty, score, total, percentage, created_at
        FROM game_results 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 10
    ''', (user_id,)).fetchall()
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    all_achievements = cursor.execute('SELECT * FROM achievements ORDER BY rarity, name').fetchall()
    user_achievements = json.loads(profile['achievements'] or '[]')
    
    return jsonify({
        'profile': {
            'user_id': profile['user_id'],
            'username': profile['username'] or '',
            'first_name': profile['first_name'],
            'last_name': profile['last_name'] or '',
            'total_games': profile['total_games'],
            'total_score': profile['total_score'],
            'best_streak': profile['best_streak'],
            'current_streak': profile['current_streak'],
            'level': profile['level'],
            'experience_points': profile['experience_points'],
            'created_at': profile['created_at'],
            'updated_at': profile['updated_at']
        },
        'category_stats': [
            {
                'category': stat['category'],
                'games': stat['games'],
                'avg_score': round(stat['avg_score'] or 0, 1),
                'best_score': round(stat['best_score'] or 0, 1)
            } for stat in category_stats
        ],
        'recent_games': [
            {
                'category': game['category'],
                'difficulty': game['difficulty'],
                'score': f"{game['score']}/{game['total']}",
                'percentage': round(game['percentage'], 1),
                'date': game['created_at']
            } for game in recent_games
        ],
        'achievements': [
            {
                'id': ach['id'],
                'name': ach['name'],
                'description': ach['description'],
                'icon': ach['icon'],
                'rarity': ach['rarity'],
                'reward_points': ach['reward_points'],
                'unlocked': ach['id'] in user_achievements
            } for ach in all_achievements
        ]
    })

@app.route('/api/save_game', methods=['POST'])
@handle_db_error
def save_game():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã"""
    data = request.get_json()
    
    if not data or 'user_id' not in data:
        return jsonify({'error': 'Invalid data'}), 400
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_or_update_user_profile(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    db = get_db()
    cursor = db.cursor()
    
    percentage = (data.get('score', 0) / max(data.get('total', 1), 1)) * 100
    
    cursor.execute('''
        INSERT INTO game_results 
        (user_id, username, first_name, last_name, score, total, category, 
         difficulty, percentage, time_spent, hints_used, game_mode)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        data.get('user_id'),
        data.get('username', ''),
        data.get('first_name', '–ò–≥—Ä–æ–∫'),
        data.get('last_name', ''),
        data.get('score', 0),
        data.get('total', 0),
        data.get('category', 'unknown'),
        data.get('difficulty', 'easy'),
        percentage,
        data.get('time_spent', 0),
        data.get('hints_used', 0),
        data.get('game_mode', 'normal')
    ))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    cursor.execute('''
        UPDATE user_profiles 
        SET total_games = total_games + 1,
            total_score = total_score + ?,
            updated_at = CURRENT_TIMESTAMP
        WHERE user_id = ?
    ''', (data.get('score', 0), data.get('user_id')))
    
    db.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    game_result = {
        'percentage': percentage,
        'game_mode': data.get('game_mode', 'normal'),
        'time_spent': data.get('time_spent', 0),
        'total': data.get('total', 0)
    }
    
    new_achievements = check_achievements(data.get('user_id'), game_result)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    update_daily_challenge_progress(data.get('user_id'), game_result)
    
    logger.info(f"üíæ Game saved for user {data.get('user_id')}: {data.get('score')}/{data.get('total')} ({percentage:.1f}%)")
    
    return jsonify({
        'status': 'success',
        'new_achievements': new_achievements
    })

@app.route('/api/leaderboard/<category>')
@handle_db_error
def get_leaderboard(category):
    """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    db = get_db()
    cursor = db.cursor()
    
    if category == 'overall':
        results = cursor.execute('''
            SELECT user_id, username, first_name, COUNT(*) as games, 
                   AVG(percentage) as avg_score, MAX(percentage) as best_score
            FROM game_results 
            GROUP BY user_id 
            HAVING games >= 3
            ORDER BY avg_score DESC, best_score DESC 
            LIMIT 100
        ''').fetchall()
    else:
        results = cursor.execute('''
            SELECT user_id, username, first_name, COUNT(*) as games,
                   AVG(percentage) as avg_score, MAX(percentage) as best_score
            FROM game_results 
            WHERE category = ?
            GROUP BY user_id 
            HAVING games >= 2
            ORDER BY avg_score DESC, best_score DESC 
            LIMIT 100
        ''', (category,)).fetchall()
    
    leaderboard = []
    for row in results:
        leaderboard.append({
            'user_id': row['user_id'],
            'username': row['username'] or '',
            'first_name': row['first_name'] or '–ò–≥—Ä–æ–∫',
            'games': row['games'],
            'avg_score': round(row['avg_score'] or 0, 1),
            'best_score': round(row['best_score'] or 0, 1)
        })
    
    logger.info(f"üèÜ Leaderboard for {category}: {len(leaderboard)} entries")
    return jsonify(leaderboard)

@app.route('/api/daily_challenge/<user_id>')
@handle_db_error
def get_daily_challenge(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    db = get_db()
    cursor = db.cursor()
    today = date.today()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    create_daily_challenge(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    challenge = cursor.execute('''
        SELECT * FROM daily_challenges 
        WHERE user_id = ? AND challenge_date = ?
        ORDER BY id DESC
        LIMIT 1
    ''', (user_id, today)).fetchone()
    
    if not challenge:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        return jsonify({
            'type': 'games_count',
            'description': '–°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É —Å–µ–≥–æ–¥–Ω—è!',
            'target': 1,
            'progress': 0,
            'completed': False
        })
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    descriptions = {
        'games_count': f'–°—ã–≥—Ä–∞–π—Ç–µ {challenge["target_value"]} –∏–≥—Ä —Å–µ–≥–æ–¥–Ω—è',
        'category_master': '–ù–∞–±–µ—Ä–∏—Ç–µ 80%+ –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        'perfect_answers': f'–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {challenge["target_value"]} –≤–æ–ø—Ä–æ—Å–æ–≤'
    }
    
    return jsonify({
        'type': challenge['challenge_type'],
        'description': descriptions.get(challenge['challenge_type'], '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'),
        'target': challenge['target_value'],
        'progress': challenge['current_progress'],
        'completed': bool(challenge['completed'])
    })

@app.route('/api/stats')
@handle_db_error
def get_app_stats():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    db = get_db()
    cursor = db.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_profiles').fetchone()[0]
    total_games = cursor.execute('SELECT COUNT(*) FROM game_results').fetchone()[0]
    total_questions = cursor.execute('SELECT SUM(total) FROM game_results').fetchone()[0] or 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = cursor.execute('''
        SELECT category, COUNT(*) as games, AVG(percentage) as avg_score
        FROM game_results 
        GROUP BY category
        ORDER BY games DESC
    ''').fetchall()
    
    return jsonify({
        'total_users': total_users,
        'total_games': total_games,
        'total_questions_answered': total_questions,
        'category_stats': [
            {
                'category': stat['category'],
                'games': stat['games'],
                'avg_score': round(stat['avg_score'] or 0, 1)
            } for stat in category_stats
        ]
    })

# =====================================
# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´
# =====================================

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        cursor = db.cursor()
        cursor.execute('SELECT COUNT(*) FROM user_profiles')
        users_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_data = load_questions()
        questions_count = sum(
            len(difficulties.get(diff, [])) 
            for category, difficulties in questions_data.items()
            for diff in ['easy', 'medium', 'hard']
        )
        
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'database': {
                'connected': True,
                'users_count': users_count
            },
            'questions': {
                'loaded': questions_count,
                'categories': len(questions_data)
            },
            'version': '2.0.0'
        })
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/debug/questions')
def debug_questions():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö"""
    if not DEBUG:
        return jsonify({'error': 'Debug mode disabled'}), 403
    
    questions = load_questions()
    result = {}
    total = 0
    
    for category, difficulties in questions.items():
        result[category] = {}
        for difficulty, question_list in difficulties.items():
            count = len(question_list)
            result[category][difficulty] = count
            total += count
    
    result['total'] = total
    return jsonify(result)

@app.route('/debug/database')
def debug_database():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not DEBUG:
        return jsonify({'error': 'Debug mode disabled'}), 403
    
    try:
        db = get_db()
        cursor = db.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        tables = cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
        """).fetchall()
        
        table_info = {}
        for table in tables:
            table_name = table[0]
            count = cursor.execute(f'SELECT COUNT(*) FROM {table_name}').fetchone()[0]
            table_info[table_name] = count
        
        return jsonify({
            'tables': table_info,
            'database_path': DATABASE_PATH
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# =====================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# =====================================

@app.errorhandler(404)
def not_found(error):
    if request.path.startswith('/api/'):
        return jsonify({'error': 'Not found'}), 404
    return render_template('index.html')  # SPA fallback

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {error}")
    if request.path.startswith('/api/'):
        return jsonify({'error': 'Internal server error'}), 500
    return render_template('index.html')

@app.errorhandler(400)
def bad_request(error):
    if request.path.startswith('/api/'):
        return jsonify({'error': 'Bad request'}), 400
    return render_template('index.html')

# =====================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö
# =====================================

def initialize_app():
    """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Quiz Mini App...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        init_achievements()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = load_questions()
        if not questions:
            logger.warning("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(traceback.format_exc())
        return False

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if not initialize_app():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('PORT', 5000))
    host = '0.0.0.0' if not DEBUG else 'localhost'
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {DEBUG}")
    
    app.run(
        host=host, 
        port=port, 
        debug=DEBUG,
        threaded=True
    )
