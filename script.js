// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
tg.setHeaderColor('#667eea');
tg.setBackgroundColor('#667eea');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentQuiz = null;
let currentDifficulty = null;
let currentGameMode = 'normal';
let currentQuestionIndex = 0;
let score = 0;
let questions = [];
let totalQuestions = 0;
let hintsUsed = 0;
let maxHints = 2;
let gameStartTime = null;
let questionStartTime = null;
let userProfile = null;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
const userId = tg.initDataUnsafe?.user?.id || `demo_${Date.now()}`;
const userName = tg.initDataUnsafe?.user?.username || '';
const firstName = tg.initDataUnsafe?.user?.first_name || '–ò–≥—Ä–æ–∫';
const lastName = tg.initDataUnsafe?.user?.last_name || '';

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const categoryInfo = {
    'history': { 
        name: '–ò—Å—Ç–æ—Ä–∏—è', 
        emoji: 'üèõ', 
        color: '#f093fb',
        description: '–°–æ–±—ã—Ç–∏—è –ø—Ä–æ—à–ª–æ–≥–æ, –≤–µ–ª–∏–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏'
    },
    'science': { 
        name: '–ù–∞—É–∫–∞', 
        emoji: 'üî¨', 
        color: '#4facfe',
        description: '–§–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è, –æ—Ç–∫—Ä—ã—Ç–∏—è'
    },
    'geography': { 
        name: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', 
        emoji: 'üåç', 
        color: '#43e97b',
        description: '–°—Ç—Ä–∞–Ω—ã, —Å—Ç–æ–ª–∏—Ü—ã, –ø—Ä–∏—Ä–æ–¥–∞'
    },
    'sports': { 
        name: '–°–ø–æ—Ä—Ç', 
        emoji: '‚öΩ', 
        color: '#fa709a',
        description: '–û–ª–∏–º–ø–∏–∞–¥–∞, —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã, —Ä–µ–∫–æ—Ä–¥—ã'
    },
    'technology': { 
        name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 
        emoji: 'üíª', 
        color: '#43cbff',
        description: 'IT, –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –±—É–¥—É—â–µ–µ'
    },
    'arts': { 
        name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', 
        emoji: 'üé®', 
        color: '#f8b500',
        description: '–ñ–∏–≤–æ–ø–∏—Å—å, –º—É–∑—ã–∫–∞, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'
    }
};

const difficultyInfo = {
    'easy': { name: '–õ–µ–≥–∫–∏–π', emoji: 'üü¢', points: 10 },
    'medium': { name: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üü°', points: 20 },
    'hard': { name: '–°–ª–æ–∂–Ω—ã–π', emoji: 'üî¥', points: 30 }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    console.log('üß† Enhanced Quiz Mini App –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', firstName, '(ID:', userId, ')');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    updateUserGreeting();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    loadCategories();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserProfile();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    loadDailyChallenge();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    loadLeaderboard();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    fetch('/health')
        .then(response => response.json())
        .then(data => {
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', data);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function updateUserGreeting() {
    document.getElementById('userName').textContent = firstName;
    const resultPlayerName = document.getElementById('resultsPlayerName');
    if (resultPlayerName) {
        resultPlayerName.textContent = firstName;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function loadCategories() {
    const container = document.getElementById('categoriesContainer');
    const categoriesHTML = `
        <h3>üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
        <div class="category-grid">
            ${Object.entries(categoryInfo).map(([key, info]) => `
                <div class="category-card" onclick="selectCategory('${key}')">
                    <span class="category-icon">${info.emoji}</span>
                    <div class="category-name">${info.name}</div>
                    <div class="category-count">–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤</div>
                </div>
            `).join('')}
        </div>
    `;
    container.innerHTML = categoriesHTML;
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    document.getElementById(screenId).classList.add('active');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
    if (screenId === 'mainMenu') {
        tg.BackButton.hide();
    } else {
        tg.BackButton.show();
    }
    
    // Haptic feedback
    tg.HapticFeedback.impactOccurred('light');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    document.querySelector(`[onclick="showTab('${tabName}')"]`).classList.add('active');
    document.getElementById(`${tabName}Tab`).classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'profile') {
        loadUserProfile();
    } else if (tabName === 'leaderboard') {
        loadLeaderboard();
    }
    
    tg.HapticFeedback.impactOccurred('light');
}

// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
function selectGameMode(mode) {
    currentGameMode = mode;
    
    if (mode === 'marathon') {
        // –î–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        startMarathonQuiz();
    } else {
        // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–∂–µ –ø–æ–∫–∞–∑–∞–Ω)
        tg.HapticFeedback.impactOccurred('medium');
    }
}

// –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function selectCategory(category) {
    currentQuiz = category;
    
    if (currentGameMode === 'normal') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        showDifficultyScreen(category);
    }
    
    tg.HapticFeedback.impactOccurred('medium');
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function showDifficultyScreen(category) {
    const categoryData = categoryInfo[category];
    document.getElementById('selectedCategory').textContent = categoryData.name;
    showScreen('difficultyScreen');
}

// –ù–∞—á–∞–ª–æ –æ–±—ã—á–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function startQuiz(difficulty) {
    currentDifficulty = difficulty;
    await loadAndStartQuiz(currentQuiz, difficulty);
}

// –ù–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞
async function startMarathonQuiz() {
    currentDifficulty = 'mixed';
    currentGameMode = 'marathon';
    
    showScreen('loadingScreen');
    updateLoadingScreen('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞...', '–°–æ–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
        const allQuestions = [];
        
        for (const [category, difficulties] of Object.entries(categoryInfo)) {
            for (const diff of ['easy', 'medium', 'hard']) {
                try {
                    const response = await fetch(`/api/questions/${category}/${diff}`);
                    if (response.ok) {
                        const categoryQuestions = await response.json();
                        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                        categoryQuestions.forEach(q => {
                            q.category = category;
                            q.difficulty = diff;
                        });
                        allQuestions.push(...categoryQuestions);
                    }
                } catch (error) {
                    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${category}/${diff}:`, error);
                }
            }
        }
        
        if (allQuestions.length === 0) {
            throw new Error('–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º 20 –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = shuffleArray(allQuestions).slice(0, 20);
        totalQuestions = questions.length;
        
        // –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        currentQuestionIndex = 0;
        score = 0;
        hintsUsed = 0;
        gameStartTime = Date.now();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞
        document.getElementById('currentCategory').textContent = 'üèÉ‚Äç‚ôÇÔ∏è –ú–∞—Ä–∞—Ñ–æ–Ω';
        document.getElementById('currentDifficulty').textContent = 'üåà –°–º–µ—à–∞–Ω–Ω–∞—è';
        
        showScreen('quizScreen');
        showQuestion();
        
        tg.HapticFeedback.notificationOccurred('success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        showMainMenu();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—á–∞–ª–æ –æ–±—ã—á–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function loadAndStartQuiz(category, difficulty) {
    try {
        showScreen('loadingScreen');
        updateLoadingScreen('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...', `–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º ${difficultyInfo[difficulty].name.toLowerCase()} —É—Ä–æ–≤–µ–Ω—å`);
        
        const response = await fetch(`/api/questions/${category}/${difficulty}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤');
        }
        
        questions = await response.json();
        
        if (questions.length === 0) {
            throw new Error('–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        totalQuestions = questions.length;
        currentQuestionIndex = 0;
        score = 0;
        hintsUsed = 0;
        gameStartTime = Date.now();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const categoryData = categoryInfo[category];
        const difficultyData = difficultyInfo[difficulty];
        
        document.getElementById('currentCategory').textContent = `${categoryData.emoji} ${categoryData.name}`;
        document.getElementById('currentDifficulty').textContent = `${difficultyData.emoji} ${difficultyData.name}`;
        
        showScreen('quizScreen');
        showQuestion();
        
        tg.HapticFeedback.notificationOccurred('success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        showMainMenu();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function updateLoadingScreen(title, subtitle) {
    document.getElementById('loadingTitle').textContent = title;
    document.getElementById('loadingSubtitle').textContent = subtitle;
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const tips = [
        "üí° –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–ª—É—á—à–∞—é—Ç –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é",
        "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤",
        "üìö –ß—Ç–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞—Ä–µ–Ω–∏–µ –º–æ–∑–≥–∞",
        "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏–∫—É",
        "‚ö° –ú–æ–∑–≥ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –æ–∫–æ–ª–æ 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞",
        "üåü –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏"
    ];
    
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    document.getElementById('loadingTip').textContent = randomTip;
}

// –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function showQuestion() {
    const question = questions[currentQuestionIndex];
    questionStartTime = Date.now();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
    document.getElementById('progress').style.width = progress + '%';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    document.getElementById('questionNumber').textContent = `${currentQuestionIndex + 1}/${totalQuestions}`;
    document.getElementById('score').textContent = `–°—á–µ—Ç: ${score}`;
    document.getElementById('questionText').textContent = question.question;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    updateTimer();
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const answersContainer = document.getElementById('answers');
    answersContainer.innerHTML = '';
    
    question.options.forEach((option, index) => {
        const button = document.createElement('button');
        button.className = 'answer-btn';
        button.textContent = option;
        button.onclick = () => selectAnswer(index);
        button.id = `answer-${index}`;
        answersContainer.appendChild(button);
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    document.getElementById('explanation').style.display = 'none';
    document.getElementById('nextBtn').style.display = 'none';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    document.getElementById('hintsLeft').textContent = maxHints - hintsUsed;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (hintsUsed >= maxHints) {
        document.getElementById('hint5050').disabled = true;
        document.getElementById('hintSkip').disabled = true;
    }
}

// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
function selectAnswer(selectedIndex) {
    const question = questions[currentQuestionIndex];
    const buttons = document.querySelectorAll('.answer-btn');
    const answerTime = Date.now() - questionStartTime;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    buttons.forEach(btn => {
        btn.classList.add('disabled');
        btn.onclick = null;
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç—ã
    buttons.forEach((btn, index) => {
        if (index === question.correct) {
            btn.classList.add('correct');
        } else if (index === selectedIndex && index !== question.correct) {
            btn.classList.add('incorrect');
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    const isCorrect = selectedIndex === question.correct;
    if (isCorrect) {
        score++;
        tg.HapticFeedback.notificationOccurred('success');
    } else {
        tg.HapticFeedback.notificationOccurred('error');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    document.getElementById('score').textContent = `–°—á–µ—Ç: ${score}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (question.explanation) {
        document.getElementById('explanationText').textContent = question.explanation;
        document.getElementById('explanation').style.display = 'block';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        document.getElementById('nextBtn').style.display = 'block';
    }, 1500);
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
function useHint(hintType) {
    if (hintsUsed >= maxHints) {
        tg.showAlert('–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!');
        return;
    }
    
    const question = questions[currentQuestionIndex];
    const buttons = document.querySelectorAll('.answer-btn');
    
    if (hintType === '5050') {
        // –£–±–∏—Ä–∞–µ–º 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
        let removedCount = 0;
        buttons.forEach((btn, index) => {
            if (index !== question.correct && removedCount < 2) {
                btn.classList.add('hidden');
                btn.onclick = null;
                removedCount++;
            }
        });
        
        document.getElementById('hint5050').disabled = true;
        tg.HapticFeedback.impactOccurred('medium');
        
    } else if (hintType === 'skip') {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
        tg.showConfirm('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?', (confirmed) => {
            if (confirmed) {
                nextQuestion();
            }
        });
        return; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    }
    
    hintsUsed++;
    document.getElementById('hintsLeft').textContent = maxHints - hintsUsed;
    
    if (hintsUsed >= maxHints) {
        document.getElementById('hint5050').disabled = true;
        document.getElementById('hintSkip').disabled = true;
    }
}

// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function nextQuestion() {
    currentQuestionIndex++;
    
    if (currentQuestionIndex >= totalQuestions) {
        endQuiz();
    } else {
        showQuestion();
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function endQuiz() {
    const gameEndTime = Date.now();
    const totalTime = Math.round((gameEndTime - gameStartTime) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const percentage = Math.round((score / totalQuestions) * 100);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let grade, message, hapticType;
    if (percentage >= 90) {
        grade = "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!";
        message = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç!";
        hapticType = 'success';
    } else if (percentage >= 80) {
        grade = "ü•á –û—Ç–ª–∏—á–Ω–æ!";
        message = "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –æ—á–µ–Ω—å —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω—ã!";
        hapticType = 'success';
    } else if (percentage >= 70) {
        grade = "ü•à –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!";
        message = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
        hapticType = 'success';
    } else if (percentage >= 60) {
        grade = "ü•â –•–æ—Ä–æ—à–æ!";
        message = "–ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!";
        hapticType = 'warning';
    } else if (percentage >= 40) {
        grade = "üìö –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ";
        message = "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –µ—Å—Ç—å, –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ç–µ–æ—Ä–∏—é!";
        hapticType = 'warning';
    } else {
        grade = "üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!";
        message = "–£—á–∏—Ç–µ—Å—å –¥–∞–ª—å—à–µ, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—Å—è!";
        hapticType = 'error';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const timeString = formatTime(totalTime);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('finalScore').textContent = `${score}/${totalQuestions}`;
    document.getElementById('finalPercentage').textContent = `${percentage}%`;
    document.getElementById('resultGrade').textContent = grade;
    document.getElementById('resultMessage').textContent = message;
    document.getElementById('resultTime').textContent = timeString;
    document.getElementById('resultHints').textContent = hintsUsed === 0 ? '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ' : `${hintsUsed} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    if (currentGameMode === 'marathon') {
        document.getElementById('resultCategory').textContent = 'üèÉ‚Äç‚ôÇÔ∏è –ú–∞—Ä–∞—Ñ–æ–Ω';
        document.getElementById('resultDifficulty').textContent = 'üåà –°–º–µ—à–∞–Ω–Ω–∞—è';
    } else {
        const categoryData = categoryInfo[currentQuiz];
        const difficultyData = difficultyInfo[currentDifficulty];
        document.getElementById('resultCategory').textContent = `${categoryData.emoji} ${categoryData.name}`;
        document.getElementById('resultDifficulty').textContent = `${difficultyData.emoji} ${difficultyData.name}`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    try {
        const response = await fetch('/api/save_game', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: userId,
                username: userName,
                first_name: firstName,
                last_name: lastName,
                score: score,
                total: totalQuestions,
                category: currentQuiz || 'mixed',
                difficulty: currentDifficulty,
                time_spent: totalTime,
                hints_used: hintsUsed,
                game_mode: currentGameMode
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (result.new_achievements && result.new_achievements.length > 0) {
                showNewAchievements(result.new_achievements);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
    }
    
    // Haptic feedback
    tg.HapticFeedback.notificationOccurred(hapticType);
    
    showScreen('resultsScreen');
}

// –ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showNewAchievements(achievements) {
    const container = document.getElementById('newAchievements');
    const list = container.querySelector('.achievements-list');
    
    list.innerHTML = achievements.map(ach => `
        <div class="new-achievement-item bounce">
            <div class="new-achievement-icon">${ach.icon}</div>
            <div class="new-achievement-info">
                <h4>${ach.name}</h4>
                <p>${ach.description} (+${ach.points} –æ—á–∫–æ–≤)</p>
            </div>
        </div>
    `).join('');
    
    container.style.display = 'block';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if (achievements.length === 1) {
        tg.showAlert(`üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievements[0].name}!`);
    } else {
        tg.showAlert(`üéâ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${achievements.length}!`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProfile() {
    try {
        const response = await fetch(`/api/profile/${userId}`);
        if (response.ok) {
            userProfile = await response.json();
            updateProfileDisplay();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileDisplay() {
    if (!userProfile) return;
    
    const profile = userProfile.profile;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('profileName').textContent = 
        `${profile.first_name} ${profile.last_name || ''}`.trim();
    document.getElementById('profileStats').textContent = 
        `${profile.total_games} –∏–≥—Ä ‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${profile.best_streak}`;
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievementsList = document.getElementById('achievementsList');
    achievementsList.innerHTML = userProfile.achievements.map(ach => `
        <div class="achievement-item ${ach.unlocked ? 'unlocked' : 'locked'}">
            <span class="achievement-icon">${ach.icon}</span>
            <div class="achievement-name">${ach.name}</div>
            <div class="achievement-desc">${ach.description}</div>
        </div>
    `).join('');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const statsContainer = document.getElementById('categoryStats');
    if (userProfile.category_stats.length === 0) {
        statsContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>';
    } else {
        statsContainer.innerHTML = userProfile.category_stats.map(stat => {
            const categoryData = categoryInfo[stat.category];
            return `
                <div class="stat-item">
                    <div class="stat-header">
                        <span class="stat-category">${categoryData.emoji} ${categoryData.name}</span>
                    </div>
                    <div class="stat-details">
                        <div class="stat-detail">
                            <span class="stat-value">${stat.games}</span>
                            <span class="stat-label">–∏–≥—Ä</span>
                        </div>
                        <div class="stat-detail">
                            <span class="stat-value">${stat.avg_score}%</span>
                            <span class="stat-label">—Å—Ä–µ–¥–Ω–∏–π</span>
                        </div>
                        <div class="stat-detail">
                            <span class="stat-value">${stat.best_score}%</span>
                            <span class="stat-label">–ª—É—á—à–∏–π</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function loadLeaderboard() {
    const category = document.getElementById('leaderboardCategory').value;
    
    try {
        const response = await fetch(`/api/leaderboard/${category}`);
        if (response.ok) {
            const leaderboard = await response.json();
            updateLeaderboardDisplay(leaderboard);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateLeaderboardDisplay(leaderboard) {
    const container = document.getElementById('leaderboardList');
    
    if (leaderboard.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç</p>';
        return;
    }
    
    container.innerHTML = leaderboard.map((player, index) => {
        const medals = ['ü•á', 'ü•à', 'ü•â'];
        const rank = index < 3 ? medals[index] : (index + 1);
        const isCurrentUser = player.user_id === userId;
        
        return `
            <div class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}">
                <div class="rank ${index < 3 ? 'medal' : ''}">${rank}</div>
                <div class="player-info">
                    <div class="player-name">${player.first_name} ${isCurrentUser ? '(–í—ã)' : ''}</div>
                    <div class="player-stats">${player.games} –∏–≥—Ä ‚Ä¢ –õ—É—á—à–∏–π: ${player.best_score}%</div>
                </div>
                <div class="player-score">${player.avg_score}%</div>
            </div>
        `;
    }).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function loadDailyChallenge() {
    try {
        const response = await fetch(`/api/daily_challenge/${userId}`);
        if (response.ok) {
            const challenge = await response.json();
            updateDailyChallengeDisplay(challenge);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function updateDailyChallengeDisplay(challenge) {
    document.getElementById('challengeText').textContent = challenge.description;
    document.getElementById('challengeStatus').textContent = `${challenge.progress}/${challenge.target}`;
    
    const progress = (challenge.progress / challenge.target) * 100;
    document.getElementById('challengeProgress').style.width = `${Math.min(progress, 100)}%`;
    
    if (challenge.completed) {
        document.getElementById('challengeText').textContent += ' ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!';
        document.querySelector('.daily-challenge').style.background = 
            'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)';
    }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResult() {
    const score = document.getElementById('finalScore').textContent;
    const percentage = document.getElementById('finalPercentage').textContent;
    const category = document.getElementById('resultCategory').textContent;
    
    const shareText = `üß† –Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n` +
                     `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${score} (${percentage})\n` +
                     `üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n\n` +
                     `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ –≤—ã! üéØ`;
    
    if (navigator.share) {
        navigator.share({
            title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã',
            text: shareText
        });
    } else {
        // Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(shareText).then(() => {
            tg.showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }
}

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    showScreen('mainMenu');
    showTab('categories');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    currentQuiz = null;
    currentDifficulty = null;
    currentGameMode = 'normal';
    hintsUsed = 0;
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–¥–∞–Ω–∏—è
    loadUserProfile();
    loadDailyChallenge();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
tg.BackButton.onClick(() => {
    const currentScreen = document.querySelector('.screen.active').id;
    
    if (currentScreen === 'quizScreen') {
        tg.showConfirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É?', (confirmed) => {
            if (confirmed) {
                showMainMenu();
            }
        });
    } else if (currentScreen === 'difficultyScreen') {
        showMainMenu();
    } else {
        showMainMenu();
    }
});

// –£—Ç–∏–ª–∏—Ç—ã
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

// –¢–∞–π–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
let timerInterval = null;

function updateTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    let timeLeft = 30; // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    const timerElement = document.getElementById('timer');
    
    timerInterval = setInterval(() => {
        timeLeft--;
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `‚è± ${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            tg.showAlert('–í—Ä–µ–º—è –≤—ã—à–ª–æ!');
            setTimeout(nextQuestion, 1000);
        }
    }, 1000);
}
